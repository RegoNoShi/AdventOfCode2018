
import re


puzzle = open("../inputs/Day10.txt", "r").readlines()


def move(_points, _speeds):
    return [(_points[idx][0] + _speeds[idx][0], _points[idx][1] + _speeds[idx][1]) for idx in range(len(_points))]


def draw(_points):
    field = ''
    for _y in range(min([p[1] for p in _points]), max([p[1] for p in _points]) + 1):
        for _x in range(min([p[0] for p in _points]), max([p[0] for p in _points]) + 1):
            if (_x, _y) in _points:
                field += '# '
            else:
                field += '. '
        field += '\n'
    print(field)


points = []
speeds = []
avg_d = 0
for line in puzzle:
    match = re.search(r"position=<\s*(-?\d+),\s*(-?\d+)> velocity=<\s*(-?\d+),\s*(-?\d+)>", line)
    x, y, dx, dy = [int(match.group(i)) for i in range(1, 5)]
    points.append((x, y))
    speeds.append((dx, dy))

min_height = float('inf')
time = 0
while True:
    new_points = move(points, speeds)
    height = max([p[1] for p in new_points]) - abs(min([p[1] for p in new_points]))
    if height > min_height:
        break
    time += 1
    min_height = height
    points = new_points

draw(points)
expected_output_part1 = [(130, 155), (124, 153), (154, 154), (128, 160), (125, 151), (173, 154), (136, 158), (128, 152),
                         (160, 157), (144, 153), (172, 151), (149, 152), (172, 155), (138, 156), (132, 154), (144, 153),
                         (163, 155), (144, 152), (147, 155), (116, 156), (170, 155), (145, 155), (124, 157), (125, 151),
                         (160, 159), (154, 154), (160, 153), (161, 155), (149, 159), (114, 160), (141, 153), (163, 155),
                         (168, 158), (136, 151), (160, 151), (116, 151), (120, 159), (168, 157), (168, 152), (140, 154),
                         (133, 151), (129, 157), (136, 160), (152, 153), (144, 151), (168, 159), (163, 151), (138, 156),
                         (162, 155), (140, 160), (162, 155), (141, 152), (173, 152), (136, 151), (162, 155), (144, 155),
                         (152, 158), (160, 159), (153, 155), (144, 155), (116, 152), (146, 155), (149, 151), (149, 157),
                         (141, 151), (139, 151), (156, 159), (144, 152), (137, 160), (168, 155), (149, 160), (152, 152),
                         (149, 156), (164, 151), (116, 159), (152, 153), (144, 151), (116, 154), (160, 158), (145, 155),
                         (125, 151), (156, 159), (140, 154), (144, 159), (116, 158), (138, 160), (141, 160), (144, 160),
                         (147, 155), (152, 158), (144, 158), (149, 160), (149, 153), (153, 156), (133, 152), (138, 160),
                         (169, 155), (116, 159), (141, 152), (137, 160), (144, 153), (160, 154), (169, 155), (165, 151),
                         (173, 152), (173, 153), (124, 158), (168, 156), (168, 153), (141, 151), (168, 154), (114, 160),
                         (154, 157), (129, 158), (168, 158), (124, 155), (132, 153), (116, 154), (133, 159), (157, 151),
                         (137, 160), (144, 157), (138, 156), (144, 154), (131, 155), (137, 157), (117, 151), (137, 151),
                         (170, 151), (128, 151), (132, 153), (124, 159), (149, 158), (136, 151), (157, 151), (168, 153),
                         (128, 159), (168, 158), (160, 152), (136, 159), (123, 151), (131, 156), (171, 155), (152, 157),
                         (133, 159), (112, 158), (113, 160), (115, 160), (140, 154), (156, 152), (116, 157), (131, 156),
                         (116, 153), (152, 157), (121, 160), (124, 159), (152, 160), (120, 158), (132, 153), (123, 151),
                         (152, 154), (173, 154), (132, 157), (152, 160), (116, 154), (144, 152), (139, 155), (136, 159),
                         (144, 158), (163, 151), (115, 160), (144, 156), (116, 151), (152, 159), (149, 152), (168, 152),
                         (171, 155), (155, 153), (165, 151), (155, 158), (173, 154), (139, 160), (152, 152), (173, 153),
                         (123, 160), (128, 151), (155, 153), (148, 155), (115, 160), (160, 155), (171, 155), (116, 156),
                         (155, 153), (120, 159), (160, 153), (168, 152), (124, 158), (160, 159), (160, 151), (152, 151),
                         (152, 156), (129, 153), (122, 160), (149, 151), (173, 153), (136, 159), (136, 158), (160, 156),
                         (147, 155), (161, 151), (120, 159), (121, 160), (116, 157), (115, 151), (116, 153), (130, 155),
                         (160, 153), (138, 151), (160, 160), (144, 159), (120, 158), (145, 155), (160, 160), (116, 155),
                         (124, 152), (164, 155), (138, 151), (132, 154), (148, 155), (170, 155), (124, 156), (133, 151),
                         (133, 160), (164, 155), (153, 156), (152, 153), (160, 158), (124, 154), (116, 158), (124, 152),
                         (141, 160), (160, 156), (141, 151), (152, 154), (129, 153), (129, 153), (149, 154), (149, 151),
                         (170, 151), (132, 158), (168, 153), (115, 151), (116, 151), (117, 151), (116, 159), (152, 156),
                         (171, 151), (149, 160), (157, 151), (130, 156), (131, 155), (116, 158), (132, 154), (168, 151),
                         (149, 155), (130, 155), (149, 157), (112, 158), (153, 156), (120, 158), (154, 157), (152, 159),
                         (128, 151), (140, 151), (136, 158), (116, 152), (157, 160), (128, 159), (131, 155), (149, 152),
                         (124, 153), (112, 158), (156, 159), (115, 151), (169, 151), (129, 154), (124, 151), (156, 152),
                         (162, 151), (129, 154), (156, 152), (163, 155), (123, 151), (160, 152), (140, 151), (152, 155),
                         (148, 155), (149, 158), (161, 155), (133, 152), (152, 155), (162, 151), (168, 160), (141, 152),
                         (141, 160), (112, 159), (153, 155), (152, 157)]
output_part1 = points
if output_part1 == expected_output_part1:
    print(f"✅ Challenge Part 1 -> {output_part1}")
else:
    print(f"❌ Challenge Part 1 -> Expected output {expected_output_part1}, got {output_part1}")

expected_output_part2 = 10036
output_part2 = time
if output_part2 == expected_output_part2:
    print(f"✅ Challenge Part 2 -> {output_part2}")
else:
    print(f"❌ Challenge Part 2 -> Expected output {expected_output_part2}, got {output_part2}")
